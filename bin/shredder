#!/usr/bin/env ruby
require 'shredder'
raise "Need Shredder version ~> 0.1" if Shredder::VERSION < '0.1'

# Command line utility
class ShredderCommandLine
  def self.version
    puts Shredder::VERSION
    exit(0)
  end

  def self.help
    puts <<EOT
shredder      --shred sewed_file shred_file1 shread_file2...  # shred a file to shreds
shredder --io --shred            shred_file1 shread_file2...  # shred stdin to shreds
shredder      --sew   sewed_file shred_file1 shread_file2...  # sew shreds back to file
shredder --io --sew              shred_file1 shread_file2...  # sew shreds out to stdout
EOT
    print "VERSION: "
    ShredderCommandLine.version
  end

  def self.parse_argv
    options = ''
    while ARGV[0]=~/^-/ do
      options += ARGV.shift
    end
    ShredderCommandLine.version if options =~ /-v\b/ || options =~ /--version\b/ # need to allow verbose below.
    ShredderCommandLine.help if ARGV.length==0 || options =~ /-h/
    $verbose = (options=~/--verbose\b/)? true : false
    # validate
    raise "--sew or --shred ?" if !(options=~/--sew\b/) && !(options=~/--shred\b/)
    length = ARGV.length
    raise "Expected sew shred1 shred2 ..."	if length < 2 && !(options=~/--io\b/)
    raise "Expected shred1 shred2..."		if length < 1
    return options
  end

  def initialize
    options = ShredderCommandLine.parse_argv
    @shredding = (options=~/--shred/)? true : false
    if options=~/--io/ then
      if @shredding then
        @sew = $stdin
        @shreds = ARGV.map{|filename| File.open(filename,'w')} # WRITE SHREDS
      else
        @sew = $stdout
        @shreds = ARGV.map{|filename| File.open(filename,'r')} # READ SHREDS
      end
    else
      @sew = ARGV.shift
      @shreds = ARGV
    end
  end

  def execute
    shredder = (@sew.class == String)? Shredder::Files.new(@sew,@shreds): Shredder::Streams.new(@sew,@shreds)
    begin
      (@shredding)? shredder.shred : shredder.sew
    rescue StandardError
      $stderr.puts $!
    ensure
      @shreds.each{|filehandle| filehandle.close}	if !(@sew.class == String)
    end
  end
end

begin
  ShredderCommandLine.new.execute
rescue StandardError
  $stderr.puts $!
  $stderr.puts $!.backtrace if $verbose
end
