#! ruby
require 'stringio'
require 'test/unit'
require 'shredder'
include Shredder

class TestShredderFiles < Test::Unit::TestCase
  def test_shredder_files_init
    shredder = Files.new('abc', ['a','b','c'])
    assert_equal ['a','b','c'], shredder.shreds

    shredder = Files.new('abc', 'xyz')
    assert_equal ['xyz.1','xyz.2'], shredder.shreds

    shredder = Files.new('abc', 'a', 4)
    assert_equal ['a.1','a.2','a.3','a.4'], shredder.shreds

    shredder = Files.new('abc', 5)
    assert_equal ['abc.1','abc.2','abc.3','abc.4','abc.5'], shredder.shreds

    shredder = Files.new('abc')
    assert_equal ['abc.1','abc.2'], shredder.shreds

    shredder = Files.new('abc', n: 3)
    assert_equal ['abc.1','abc.2', 'abc.3'], shredder.shreds

    shreds = shred_files(3)
    assert_equal ['shred.1','shred.2', 'shred.3'], shreds
  end

  def test_shredder_files_shred_and_sew
    string = "This is a test file: 1, 2, 3.\n"
    sewn = 'test/sewn.txt'
    shreds = 'tmp/shred'
    restored = 'tmp/restored.txt'

    assert_equal string, File.read(sewn)
    assert_equal 30, File.size(sewn)

    (1..3).each{|i|File.exist?(_="#{shreds}.#{i}") and File.delete(_)}
    File.delete(restored)  if File.exist?(restored)

    shredder = Files.new(sewn, shreds, 3)
    assert_equal sewn, shredder.sewn
    assert_equal ["tmp/shred.1","tmp/shred.2","tmp/shred.3"], shredder.shreds

    shredder.shred
    (1..3).each{|i| assert_equal 10, File.size("#{shreds}.#{i}")}

    shredder.sewn = restored
    shredder.sew
    assert_equal string, File.read(restored)
  end

  def test_shredder_stringio
    string = 'This is a test string: 1, 2, 3.'
    sio = StringIO.new string
    shreds = [StringIO.new, StringIO.new]
    shredder = Shredder::Streams.new(sio, shreds)
    assert_equal 31, shredder.shred
    assert_equal "T\u0001S\u001AAT\u0016T\a\e\t\u001A\u001D\u0012\f\u001D",
                 shreds[0].string
    assert_equal "<\u001AISA\u0011\aS\u0006\a]\u0011\f\u001E\u0013",
                 shreds[1].string
    restored = StringIO.new
    shreds.each{_1.rewind}
    sower = Shredder::Streams.new(restored, shreds)
    assert_equal 31, sower.sew
    assert_equal string, restored.string
  end
end
